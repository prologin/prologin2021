// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2020 Association Prologin <association@prologin.org>

// This file contains the code to call the API functions from the C language.
// This file was generated by stechec2-generator. DO NOT EDIT.

#include <string>
#include <vector>

extern "C"
{
#include "api.h"
}

template <typename CType, typename CxxType>
CxxType c_to_cxx(CType in)
{
    return in;
}

template <>
std::string c_to_cxx<char*, std::string>(char* in)
{
    return in;
}

template <typename CType, typename CType_array, typename CxxType>
std::vector<CxxType> c_to_cxx_array(CType_array in)
{
    std::vector<CxxType> out(in.length);
    for (size_t i = 0; i < in.length; ++i)
        out[i] = c_to_cxx<CType, CxxType>(in.items[i]);
    return out;
}

template <typename CType, typename CxxType>
CType cxx_to_c(CxxType in)
{
    return in;
}

template <>
char* cxx_to_c<char*, std::string>(std::string in)
{
    size_t l = in.length();
    char* out = (char *) malloc(l + 1);
    for (size_t i = 0; i < l; i++)
        out[i] = in[i];
    out[l] = 0;
    return out;
}

template <typename CType, typename CType_array, typename CxxType>
CType_array cxx_to_c_array(const std::vector<CxxType>& in)
{
    CType_array out = {NULL, in.size()};
    out.items = (CType*)malloc((out.length) * sizeof(CType));
    for (size_t i = 0; i < out.length; ++i)
        out.items[i] = cxx_to_c<CType, CxxType>(in[i]);
    return out;
}

/// Position du panda.

typedef struct __internal__cxx__position
{
    int x; ///< Coordonnée : x
    int y; ///< Coordonnée : y
} __internal__cxx__position;

template <>
__internal__cxx__position c_to_cxx<position, __internal__cxx__position>(position in)
{
    __internal__cxx__position out;
    out.x = c_to_cxx<int, int>(in.x);
    out.y = c_to_cxx<int, int>(in.y);
    return out;
}

template <>
position cxx_to_c<position, __internal__cxx__position>(__internal__cxx__position in)
{
    position out;
    out.x = cxx_to_c<int, int>(in.x);
    out.y = cxx_to_c<int, int>(in.y);
    return out;
}

/// Case type pont, contient la case de début et de fin. La case de début a une
/// valeur se décrémentant, celle de fin s'incrémente.

typedef struct __internal__cxx__pont_type
{
    __internal__cxx__position debut_pos; ///< Position de la case de début
    __internal__cxx__position fin_pos; ///< Position de la case de fin
    int debut_val; ///< Valeur de la case de début
    int fin_val; ///< Valeur de la case de début
} __internal__cxx__pont_type;

template <>
__internal__cxx__pont_type c_to_cxx<pont_type, __internal__cxx__pont_type>(pont_type in)
{
    __internal__cxx__pont_type out;
    out.debut_pos = c_to_cxx<position, __internal__cxx__position>(in.debut_pos);
    out.fin_pos = c_to_cxx<position, __internal__cxx__position>(in.fin_pos);
    out.debut_val = c_to_cxx<int, int>(in.debut_val);
    out.fin_val = c_to_cxx<int, int>(in.fin_val);
    return out;
}

template <>
pont_type cxx_to_c<pont_type, __internal__cxx__pont_type>(__internal__cxx__pont_type in)
{
    pont_type out;
    out.debut_pos = cxx_to_c<position, __internal__cxx__position>(in.debut_pos);
    out.fin_pos = cxx_to_c<position, __internal__cxx__position>(in.fin_pos);
    out.debut_val = cxx_to_c<int, int>(in.debut_val);
    out.fin_val = cxx_to_c<int, int>(in.fin_val);
    return out;
}

/// Panda et son joueur

typedef struct __internal__cxx__panda_info
{
    __internal__cxx__position panda_pos; ///< Position du panda
    int id_joueur; ///< Identifiant du joueur qui contrôle le panda
    int num_bebes; ///< Nombre de bébés qui sont portés par le panda parent
} __internal__cxx__panda_info;

template <>
__internal__cxx__panda_info c_to_cxx<panda_info, __internal__cxx__panda_info>(panda_info in)
{
    __internal__cxx__panda_info out;
    out.panda_pos = c_to_cxx<position, __internal__cxx__position>(in.panda_pos);
    out.id_joueur = c_to_cxx<int, int>(in.id_joueur);
    out.num_bebes = c_to_cxx<int, int>(in.num_bebes);
    return out;
}

template <>
panda_info cxx_to_c<panda_info, __internal__cxx__panda_info>(__internal__cxx__panda_info in)
{
    panda_info out;
    out.panda_pos = cxx_to_c<position, __internal__cxx__position>(in.panda_pos);
    out.id_joueur = cxx_to_c<int, int>(in.id_joueur);
    out.num_bebes = cxx_to_c<int, int>(in.num_bebes);
    return out;
}

/// Bébé panda à ramener.

typedef struct __internal__cxx__bebe_info
{
    __internal__cxx__position bebe_pos; ///< Position du bébé panda
    int id_bebe_joueur; ///< Identifiant du joueur qui peut saver le bébé
    int points_capture; ///< Nombre de points obtenus pour la capture de ce panda
} __internal__cxx__bebe_info;

template <>
__internal__cxx__bebe_info c_to_cxx<bebe_info, __internal__cxx__bebe_info>(bebe_info in)
{
    __internal__cxx__bebe_info out;
    out.bebe_pos = c_to_cxx<position, __internal__cxx__position>(in.bebe_pos);
    out.id_bebe_joueur = c_to_cxx<int, int>(in.id_bebe_joueur);
    out.points_capture = c_to_cxx<int, int>(in.points_capture);
    return out;
}

template <>
bebe_info cxx_to_c<bebe_info, __internal__cxx__bebe_info>(__internal__cxx__bebe_info in)
{
    bebe_info out;
    out.bebe_pos = cxx_to_c<position, __internal__cxx__position>(in.bebe_pos);
    out.id_bebe_joueur = cxx_to_c<int, int>(in.id_bebe_joueur);
    out.points_capture = cxx_to_c<int, int>(in.points_capture);
    return out;
}

/// Information sur un tour particulier.

typedef struct __internal__cxx__tour_info
{
    int id_joueur_joue; ///< Identifiant du joueur qui joue
    int id_panda_joue; ///< Identifiant du panda qui joue
    int id_tour; ///< Identifiant unique du tour (compteur)
} __internal__cxx__tour_info;

template <>
__internal__cxx__tour_info c_to_cxx<tour_info, __internal__cxx__tour_info>(tour_info in)
{
    __internal__cxx__tour_info out;
    out.id_joueur_joue = c_to_cxx<int, int>(in.id_joueur_joue);
    out.id_panda_joue = c_to_cxx<int, int>(in.id_panda_joue);
    out.id_tour = c_to_cxx<int, int>(in.id_tour);
    return out;
}

template <>
tour_info cxx_to_c<tour_info, __internal__cxx__tour_info>(__internal__cxx__tour_info in)
{
    tour_info out;
    out.id_joueur_joue = cxx_to_c<int, int>(in.id_joueur_joue);
    out.id_panda_joue = cxx_to_c<int, int>(in.id_panda_joue);
    out.id_tour = cxx_to_c<int, int>(in.id_tour);
    return out;
}

/// Information sur la carte de la partie en cours.

typedef struct __internal__cxx__carte_info
{
    int taille_x; ///< La taille de la carte pour les coordonnées x [0; taille_x[
    int taille_y; ///< La taille de la carte pour les coordonnées y [0; taille_y[
} __internal__cxx__carte_info;

template <>
__internal__cxx__carte_info c_to_cxx<carte_info, __internal__cxx__carte_info>(carte_info in)
{
    __internal__cxx__carte_info out;
    out.taille_x = c_to_cxx<int, int>(in.taille_x);
    out.taille_y = c_to_cxx<int, int>(in.taille_y);
    return out;
}

template <>
carte_info cxx_to_c<carte_info, __internal__cxx__carte_info>(__internal__cxx__carte_info in)
{
    carte_info out;
    out.taille_x = cxx_to_c<int, int>(in.taille_x);
    out.taille_y = cxx_to_c<int, int>(in.taille_y);
    return out;
}

/// Action représentée dans l'historique.

typedef struct __internal__cxx__action_hist
{
    action_type type_action; ///< Type de l'action
    int id_panda; ///< Identifiant du panda concerné par l'action
    direction dir; ///< Direction visée par le panda durant le déplacement
    int valeur_debut; ///< Valeur au début du pont posé (de 1 à 6 inclus)
    int valeur_fin; ///< Valeur à la fin du pont posé (de 1 à 6 inclus)
    __internal__cxx__position pos_debut; ///< Position du début du pont posé
    __internal__cxx__position pos_fin; ///< Position de la fin du pont posé
} __internal__cxx__action_hist;

template <>
__internal__cxx__action_hist c_to_cxx<action_hist, __internal__cxx__action_hist>(action_hist in)
{
    __internal__cxx__action_hist out;
    out.type_action = c_to_cxx<action_type, action_type>(in.type_action);
    out.id_panda = c_to_cxx<int, int>(in.id_panda);
    out.dir = c_to_cxx<direction, direction>(in.dir);
    out.valeur_debut = c_to_cxx<int, int>(in.valeur_debut);
    out.valeur_fin = c_to_cxx<int, int>(in.valeur_fin);
    out.pos_debut = c_to_cxx<position, __internal__cxx__position>(in.pos_debut);
    out.pos_fin = c_to_cxx<position, __internal__cxx__position>(in.pos_fin);
    return out;
}

template <>
action_hist cxx_to_c<action_hist, __internal__cxx__action_hist>(__internal__cxx__action_hist in)
{
    action_hist out;
    out.type_action = cxx_to_c<action_type, action_type>(in.type_action);
    out.id_panda = cxx_to_c<int, int>(in.id_panda);
    out.dir = cxx_to_c<direction, direction>(in.dir);
    out.valeur_debut = cxx_to_c<int, int>(in.valeur_debut);
    out.valeur_fin = cxx_to_c<int, int>(in.valeur_fin);
    out.pos_debut = cxx_to_c<position, __internal__cxx__position>(in.pos_debut);
    out.pos_fin = cxx_to_c<position, __internal__cxx__position>(in.pos_fin);
    return out;
}


extern "C" erreur api_deplacer(direction dir);

extern "C" erreur deplacer(direction dir)
{
    return cxx_to_c<erreur, erreur>(api_deplacer(c_to_cxx<direction, direction>(dir)));
}

extern "C" erreur api_poser(__internal__cxx__position position_debut, direction dir, int pont_debut, int pont_fin);

extern "C" erreur poser(position position_debut, direction dir, int pont_debut, int pont_fin)
{
    return cxx_to_c<erreur, erreur>(api_poser(c_to_cxx<position, __internal__cxx__position>(position_debut), c_to_cxx<direction, direction>(dir), c_to_cxx<int, int>(pont_debut), c_to_cxx<int, int>(pont_fin)));
}

extern "C" case_type api_type_case(__internal__cxx__position pos);

extern "C" case_type type_case(position pos)
{
    return cxx_to_c<case_type, case_type>(api_type_case(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" int api_panda_sur_case(__internal__cxx__position pos);

extern "C" int panda_sur_case(position pos)
{
    return cxx_to_c<int, int>(api_panda_sur_case(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" int api_bebe_panda_sur_case(__internal__cxx__position pos);

extern "C" int bebe_panda_sur_case(position pos)
{
    return cxx_to_c<int, int>(api_bebe_panda_sur_case(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" __internal__cxx__position api_position_panda(int id_joueur, int id_panda);

extern "C" position position_panda(int id_joueur, int id_panda)
{
    return cxx_to_c<position, __internal__cxx__position>(api_position_panda(c_to_cxx<int, int>(id_joueur), c_to_cxx<int, int>(id_panda)));
}

extern "C" __internal__cxx__pont_type api_info_pont(__internal__cxx__position pos);

extern "C" pont_type info_pont(position pos)
{
    return cxx_to_c<pont_type, __internal__cxx__pont_type>(api_info_pont(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" __internal__cxx__panda_info api_info_panda(__internal__cxx__position pos);

extern "C" panda_info info_panda(position pos)
{
    return cxx_to_c<panda_info, __internal__cxx__panda_info>(api_info_panda(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" std::vector<__internal__cxx__panda_info> api_liste_pandas();

extern "C" panda_info_array liste_pandas(void)
{
    return cxx_to_c_array<panda_info, panda_info_array, __internal__cxx__panda_info>(api_liste_pandas());
}

extern "C" std::vector<__internal__cxx__bebe_info> api_liste_bebes();

extern "C" bebe_info_array liste_bebes(void)
{
    return cxx_to_c_array<bebe_info, bebe_info_array, __internal__cxx__bebe_info>(api_liste_bebes());
}

extern "C" std::vector<__internal__cxx__position> api_positions_adjacentes(__internal__cxx__position pos);

extern "C" position_array positions_adjacentes(position pos)
{
    return cxx_to_c_array<position, position_array, __internal__cxx__position>(api_positions_adjacentes(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" __internal__cxx__position api_position_dans_direction(__internal__cxx__position pos, direction dir);

extern "C" position position_dans_direction(position pos, direction dir)
{
    return cxx_to_c<position, __internal__cxx__position>(api_position_dans_direction(c_to_cxx<position, __internal__cxx__position>(pos), c_to_cxx<direction, direction>(dir)));
}

extern "C" int api_direction_entre_positions(__internal__cxx__position origine, __internal__cxx__position cible);

extern "C" int direction_entre_positions(position origine, position cible)
{
    return cxx_to_c<int, int>(api_direction_entre_positions(c_to_cxx<position, __internal__cxx__position>(origine), c_to_cxx<position, __internal__cxx__position>(cible)));
}

extern "C" std::vector<__internal__cxx__action_hist> api_historique();

extern "C" action_hist_array historique(void)
{
    return cxx_to_c_array<action_hist, action_hist_array, __internal__cxx__action_hist>(api_historique());
}

extern "C" int api_score(int id_joueur);

extern "C" int score(int id_joueur)
{
    return cxx_to_c<int, int>(api_score(c_to_cxx<int, int>(id_joueur)));
}

extern "C" int api_moi();

extern "C" int moi(void)
{
    return cxx_to_c<int, int>(api_moi());
}

extern "C" int api_adversaire();

extern "C" int adversaire(void)
{
    return cxx_to_c<int, int>(api_adversaire());
}

extern "C" __internal__cxx__tour_info api_info_tour();

extern "C" tour_info info_tour(void)
{
    return cxx_to_c<tour_info, __internal__cxx__tour_info>(api_info_tour());
}

extern "C" __internal__cxx__carte_info api_info_carte();

extern "C" carte_info info_carte(void)
{
    return cxx_to_c<carte_info, __internal__cxx__carte_info>(api_info_carte());
}

extern "C" void api_afficher_case_type(case_type v);

extern "C" void afficher_case_type(case_type v)
{
api_afficher_case_type(c_to_cxx<case_type, case_type>(v));
}

extern "C" void api_afficher_direction(direction v);

extern "C" void afficher_direction(direction v)
{
api_afficher_direction(c_to_cxx<direction, direction>(v));
}

extern "C" void api_afficher_erreur(erreur v);

extern "C" void afficher_erreur(erreur v)
{
api_afficher_erreur(c_to_cxx<erreur, erreur>(v));
}

extern "C" void api_afficher_action_type(action_type v);

extern "C" void afficher_action_type(action_type v)
{
api_afficher_action_type(c_to_cxx<action_type, action_type>(v));
}

extern "C" void api_afficher_position(__internal__cxx__position v);

extern "C" void afficher_position(position v)
{
api_afficher_position(c_to_cxx<position, __internal__cxx__position>(v));
}

extern "C" void api_afficher_pont_type(__internal__cxx__pont_type v);

extern "C" void afficher_pont_type(pont_type v)
{
api_afficher_pont_type(c_to_cxx<pont_type, __internal__cxx__pont_type>(v));
}

extern "C" void api_afficher_panda_info(__internal__cxx__panda_info v);

extern "C" void afficher_panda_info(panda_info v)
{
api_afficher_panda_info(c_to_cxx<panda_info, __internal__cxx__panda_info>(v));
}

extern "C" void api_afficher_bebe_info(__internal__cxx__bebe_info v);

extern "C" void afficher_bebe_info(bebe_info v)
{
api_afficher_bebe_info(c_to_cxx<bebe_info, __internal__cxx__bebe_info>(v));
}

extern "C" void api_afficher_tour_info(__internal__cxx__tour_info v);

extern "C" void afficher_tour_info(tour_info v)
{
api_afficher_tour_info(c_to_cxx<tour_info, __internal__cxx__tour_info>(v));
}

extern "C" void api_afficher_carte_info(__internal__cxx__carte_info v);

extern "C" void afficher_carte_info(carte_info v)
{
api_afficher_carte_info(c_to_cxx<carte_info, __internal__cxx__carte_info>(v));
}

extern "C" void api_afficher_action_hist(__internal__cxx__action_hist v);

extern "C" void afficher_action_hist(action_hist v)
{
api_afficher_action_hist(c_to_cxx<action_hist, __internal__cxx__action_hist>(v));
}
